// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	shema "goTSV/internal/shema"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: r
func (_m *Service) GetAll(r shema.Request) ([][]shema.Tsv, error) {
	ret := _m.Called(r)

	var r0 [][]shema.Tsv
	if rf, ok := ret.Get(0).(func(shema.Request) [][]shema.Tsv); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]shema.Tsv)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(shema.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseFile provides a mock function with given fields: fileName
func (_m *Service) ParseFile(fileName string) ([]shema.Tsv, []string, error) {
	ret := _m.Called(fileName)

	var r0 []shema.Tsv
	if rf, ok := ret.Get(0).(func(string) []shema.Tsv); ok {
		r0 = rf(fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shema.Tsv)
		}
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(string) []string); ok {
		r1 = rf(fileName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(fileName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Scanner provides a mock function with given fields:
func (_m *Service) Scanner() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WritePDF provides a mock function with given fields: tsv, unitGuid
func (_m *Service) WritePDF(tsv []shema.Tsv, unitGuid []string) error {
	ret := _m.Called(tsv, unitGuid)

	var r0 error
	if rf, ok := ret.Get(0).(func([]shema.Tsv, []string) error); ok {
		r0 = rf(tsv, unitGuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
